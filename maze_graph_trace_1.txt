graph= {(0, 1): [(0, 2)], (0, 2): [(1, 2), (0, 1), (0, 3)], (0, 3): [(1, 3), (0, 2), (0, 4)], (0, 4): [(0, 3), (0, 5)], (0, 5): [(1, 5), (0, 4), (0, 6)], (0, 6): [(0, 5), (0, 7)], (0, 7): [(1, 7), (0, 6), (0, 8)], (0, 8): [(1, 8), (0, 7)], (1, 0): [], (1, 2): [(0, 2), (2, 2), (1, 3)], (1, 3): [(0, 3), (2, 3), (1, 2)], (1, 5): [(0, 5), (2, 5)], (1, 7): [(0, 7), (1, 8)], (1, 8): [(0, 8), (1, 7)], (2, 1): [(2, 2)], (2, 2): [(1, 2), (3, 2), (2, 1), (2, 3)], (2, 3): [(1, 3), (2, 2), (2, 4)], (2, 4): [(3, 4), (2, 3), (2, 5)], (2, 5): [(1, 5), (3, 5), (2, 4)], (2, 9): [(3, 9)], (3, 2): [(2, 2), (4, 2)], (3, 4): [(2, 4), (3, 5)], (3, 5): [(2, 5), (4, 5), (3, 4), (3, 6)], (3, 6): [(4, 6), (3, 5), (3, 7)], (3, 7): [(3, 6)], (3, 9): [(2, 9), (4, 9)], (4, 0): [(5, 0), (4, 1)], (4, 1): [(5, 1), (4, 0), (4, 2)], (4, 2): [(3, 2), (5, 2), (4, 1)], (4, 5): [(3, 5), (5, 5), (4, 6)], (4, 6): [(3, 6), (4, 5)], (4, 8): [(5, 8), (4, 9)], (4, 9): [(3, 9), (5, 9), (4, 8)], (5, 0): [(4, 0), (6, 0), (5, 1)], (5, 1): [(4, 1), (5, 0), (5, 2)], (5, 2): [(4, 2), (5, 1), (5, 3)], (5, 3): [(5, 2), (5, 4)], (5, 4): [(6, 4), (5, 3), (5, 5)], (5, 5): [(4, 5), (5, 4)], (5, 7): [(6, 7), (5, 8)], (5, 8): [(4, 8), (6, 8), (5, 7), (5, 9)], (5, 9): [(4, 9), (5, 8)], (6, 0): [(5, 0)], (6, 4): [(5, 4), (7, 4)], (6, 6): [(6, 7)], (6, 7): [(5, 7), (7, 7), (6, 6), (6, 8)], (6, 8): [(5, 8), (7, 8), (6, 7)], (7, 1): [(8, 1), (7, 2)], (7, 2): [(8, 2), (7, 1), (7, 3)], (7, 3): [(7, 2), (7, 4)], (7, 4): [(6, 4), (7, 3)], (7, 7): [(6, 7), (7, 8)], (7, 8): [(6, 8), (8, 8), (7, 7), (7, 9)], (7, 9): [(7, 8)], (8, 1): [(7, 1), (8, 2)], (8, 2): [(7, 2), (8, 1)], (8, 5): [(9, 5)], (8, 8): [(7, 8), (9, 8)], (9, 3): [], (9, 5): [(8, 5), (9, 6)], (9, 6): [(9, 5)], (9, 8): [(8, 8), (9, 9)], (9, 9): [(9, 8)]}
src= (8, 1)
dest= (0, 1)
heap= []
Action: push_heap(heap,(0,0,8,1))
observation: heap = [(0, 0, 8, 1)]
initializing the search:
selecting the node from the heap with lowest cost
f=0,g=0,node=(8,1)
Action: pop_heap(heap,(0,0,8,1))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (7, 1)
Action: check_closed_list(7,1)
observation: False
child node is not visited till now
Action: calculate_h_value(7,1,(0, 1))
observation: h_new=7
g_new=0+1
f_new=1+7
pushing this node into heap
Action: push_heap(heap,(8,1,7,1))
observation: heap=[]
updating the cell details
Action: update_cell_details(7,1)
observation: done
child node is (8, 2)
Action: check_closed_list(8,2)
observation: False
child node is not visited till now
Action: calculate_h_value(8,2,(0, 1))
observation: h_new=9
g_new=0+1
f_new=1+9
pushing this node into heap
Action: push_heap(heap,(10,1,8,2))
observation: heap=[(8, 1, 7, 1)]
updating the cell details
Action: update_cell_details(8,2)
observation: done
selecting the node from the heap with lowest cost
f=8,g=1,node=(7,1)
Action: pop_heap(heap,(8,1,7,1))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (8, 1)
Action: check_closed_list(8,1)
observation: True
child node is already visited
continuing
child node is (7, 2)
Action: check_closed_list(7,2)
observation: False
child node is not visited till now
Action: calculate_h_value(7,2,(0, 1))
observation: h_new=8
g_new=1+1
f_new=2+8
pushing this node into heap
Action: push_heap(heap,(10,2,7,2))
observation: heap=[(10, 1, 8, 2)]
updating the cell details
Action: update_cell_details(7,2)
observation: done
selecting the node from the heap with lowest cost
f=10,g=1,node=(8,2)
Action: pop_heap(heap,(10,1,8,2))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (7, 2)
Action: check_closed_list(7,2)
observation: False
child node is not visited till now
Action: calculate_h_value(7,2,(0, 1))
observation: h_new=8
g_new=1+1
f_new=2+8
child node is (8, 1)
Action: check_closed_list(8,1)
observation: True
child node is already visited
continuing
selecting the node from the heap with lowest cost
f=10,g=2,node=(7,2)
Action: pop_heap(heap,(10,2,7,2))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (8, 2)
Action: check_closed_list(8,2)
observation: True
child node is already visited
continuing
child node is (7, 1)
Action: check_closed_list(7,1)
observation: True
child node is already visited
continuing
child node is (7, 3)
Action: check_closed_list(7,3)
observation: False
child node is not visited till now
Action: calculate_h_value(7,3,(0, 1))
observation: h_new=9
g_new=2+1
f_new=3+9
pushing this node into heap
Action: push_heap(heap,(12,3,7,3))
observation: heap=[]
updating the cell details
Action: update_cell_details(7,3)
observation: done
selecting the node from the heap with lowest cost
f=12,g=3,node=(7,3)
Action: pop_heap(heap,(12,3,7,3))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (7, 2)
Action: check_closed_list(7,2)
observation: True
child node is already visited
continuing
child node is (7, 4)
Action: check_closed_list(7,4)
observation: False
child node is not visited till now
Action: calculate_h_value(7,4,(0, 1))
observation: h_new=10
g_new=3+1
f_new=4+10
pushing this node into heap
Action: push_heap(heap,(14,4,7,4))
observation: heap=[]
updating the cell details
Action: update_cell_details(7,4)
observation: done
selecting the node from the heap with lowest cost
f=14,g=4,node=(7,4)
Action: pop_heap(heap,(14,4,7,4))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (6, 4)
Action: check_closed_list(6,4)
observation: False
child node is not visited till now
Action: calculate_h_value(6,4,(0, 1))
observation: h_new=9
g_new=4+1
f_new=5+9
pushing this node into heap
Action: push_heap(heap,(14,5,6,4))
observation: heap=[]
updating the cell details
Action: update_cell_details(6,4)
observation: done
child node is (7, 3)
Action: check_closed_list(7,3)
observation: True
child node is already visited
continuing
selecting the node from the heap with lowest cost
f=14,g=5,node=(6,4)
Action: pop_heap(heap,(14,5,6,4))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (5, 4)
Action: check_closed_list(5,4)
observation: False
child node is not visited till now
Action: calculate_h_value(5,4,(0, 1))
observation: h_new=8
g_new=5+1
f_new=6+8
pushing this node into heap
Action: push_heap(heap,(14,6,5,4))
observation: heap=[]
updating the cell details
Action: update_cell_details(5,4)
observation: done
child node is (7, 4)
Action: check_closed_list(7,4)
observation: True
child node is already visited
continuing
selecting the node from the heap with lowest cost
f=14,g=6,node=(5,4)
Action: pop_heap(heap,(14,6,5,4))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (6, 4)
Action: check_closed_list(6,4)
observation: True
child node is already visited
continuing
child node is (5, 3)
Action: check_closed_list(5,3)
observation: False
child node is not visited till now
Action: calculate_h_value(5,3,(0, 1))
observation: h_new=7
g_new=6+1
f_new=7+7
pushing this node into heap
Action: push_heap(heap,(14,7,5,3))
observation: heap=[]
updating the cell details
Action: update_cell_details(5,3)
observation: done
child node is (5, 5)
Action: check_closed_list(5,5)
observation: False
child node is not visited till now
Action: calculate_h_value(5,5,(0, 1))
observation: h_new=9
g_new=6+1
f_new=7+9
pushing this node into heap
Action: push_heap(heap,(16,7,5,5))
observation: heap=[(14, 7, 5, 3)]
updating the cell details
Action: update_cell_details(5,5)
observation: done
selecting the node from the heap with lowest cost
f=14,g=7,node=(5,3)
Action: pop_heap(heap,(14,7,5,3))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (5, 2)
Action: check_closed_list(5,2)
observation: False
child node is not visited till now
Action: calculate_h_value(5,2,(0, 1))
observation: h_new=6
g_new=7+1
f_new=8+6
pushing this node into heap
Action: push_heap(heap,(14,8,5,2))
observation: heap=[(16, 7, 5, 5)]
updating the cell details
Action: update_cell_details(5,2)
observation: done
child node is (5, 4)
Action: check_closed_list(5,4)
observation: True
child node is already visited
continuing
selecting the node from the heap with lowest cost
f=14,g=8,node=(5,2)
Action: pop_heap(heap,(14,8,5,2))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (4, 2)
Action: check_closed_list(4,2)
observation: False
child node is not visited till now
Action: calculate_h_value(4,2,(0, 1))
observation: h_new=5
g_new=8+1
f_new=9+5
pushing this node into heap
Action: push_heap(heap,(14,9,4,2))
observation: heap=[(16, 7, 5, 5)]
updating the cell details
Action: update_cell_details(4,2)
observation: done
child node is (5, 1)
Action: check_closed_list(5,1)
observation: False
child node is not visited till now
Action: calculate_h_value(5,1,(0, 1))
observation: h_new=5
g_new=8+1
f_new=9+5
pushing this node into heap
Action: push_heap(heap,(14,9,5,1))
observation: heap=[(14, 9, 4, 2), (16, 7, 5, 5)]
updating the cell details
Action: update_cell_details(5,1)
observation: done
child node is (5, 3)
Action: check_closed_list(5,3)
observation: True
child node is already visited
continuing
selecting the node from the heap with lowest cost
f=14,g=9,node=(4,2)
Action: pop_heap(heap,(14,9,4,2))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (3, 2)
Action: check_closed_list(3,2)
observation: False
child node is not visited till now
Action: calculate_h_value(3,2,(0, 1))
observation: h_new=4
g_new=9+1
f_new=10+4
pushing this node into heap
Action: push_heap(heap,(14,10,3,2))
observation: heap=[(14, 9, 5, 1), (16, 7, 5, 5)]
updating the cell details
Action: update_cell_details(3,2)
observation: done
child node is (5, 2)
Action: check_closed_list(5,2)
observation: True
child node is already visited
continuing
child node is (4, 1)
Action: check_closed_list(4,1)
observation: False
child node is not visited till now
Action: calculate_h_value(4,1,(0, 1))
observation: h_new=4
g_new=9+1
f_new=10+4
pushing this node into heap
Action: push_heap(heap,(14,10,4,1))
observation: heap=[(14, 9, 5, 1), (16, 7, 5, 5), (14, 10, 3, 2)]
updating the cell details
Action: update_cell_details(4,1)
observation: done
selecting the node from the heap with lowest cost
f=14,g=9,node=(5,1)
Action: pop_heap(heap,(14,9,5,1))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (4, 1)
Action: check_closed_list(4,1)
observation: False
child node is not visited till now
Action: calculate_h_value(4,1,(0, 1))
observation: h_new=4
g_new=9+1
f_new=10+4
child node is (5, 0)
Action: check_closed_list(5,0)
observation: False
child node is not visited till now
Action: calculate_h_value(5,0,(0, 1))
observation: h_new=6
g_new=9+1
f_new=10+6
pushing this node into heap
Action: push_heap(heap,(16,10,5,0))
observation: heap=[(14, 10, 3, 2), (14, 10, 4, 1), (16, 7, 5, 5)]
updating the cell details
Action: update_cell_details(5,0)
observation: done
child node is (5, 2)
Action: check_closed_list(5,2)
observation: True
child node is already visited
continuing
selecting the node from the heap with lowest cost
f=14,g=10,node=(3,2)
Action: pop_heap(heap,(14,10,3,2))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (2, 2)
Action: check_closed_list(2,2)
observation: False
child node is not visited till now
Action: calculate_h_value(2,2,(0, 1))
observation: h_new=3
g_new=10+1
f_new=11+3
pushing this node into heap
Action: push_heap(heap,(14,11,2,2))
observation: heap=[(14, 10, 4, 1), (16, 10, 5, 0), (16, 7, 5, 5)]
updating the cell details
Action: update_cell_details(2,2)
observation: done
child node is (4, 2)
Action: check_closed_list(4,2)
observation: True
child node is already visited
continuing
selecting the node from the heap with lowest cost
f=14,g=10,node=(4,1)
Action: pop_heap(heap,(14,10,4,1))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (5, 1)
Action: check_closed_list(5,1)
observation: True
child node is already visited
continuing
child node is (4, 0)
Action: check_closed_list(4,0)
observation: False
child node is not visited till now
Action: calculate_h_value(4,0,(0, 1))
observation: h_new=5
g_new=10+1
f_new=11+5
pushing this node into heap
Action: push_heap(heap,(16,11,4,0))
observation: heap=[(14, 11, 2, 2), (16, 10, 5, 0), (16, 7, 5, 5)]
updating the cell details
Action: update_cell_details(4,0)
observation: done
child node is (4, 2)
Action: check_closed_list(4,2)
observation: True
child node is already visited
continuing
selecting the node from the heap with lowest cost
f=14,g=11,node=(2,2)
Action: pop_heap(heap,(14,11,2,2))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (1, 2)
Action: check_closed_list(1,2)
observation: False
child node is not visited till now
Action: calculate_h_value(1,2,(0, 1))
observation: h_new=2
g_new=11+1
f_new=12+2
pushing this node into heap
Action: push_heap(heap,(14,12,1,2))
observation: heap=[(16, 7, 5, 5), (16, 10, 5, 0), (16, 11, 4, 0)]
updating the cell details
Action: update_cell_details(1,2)
observation: done
child node is (3, 2)
Action: check_closed_list(3,2)
observation: True
child node is already visited
continuing
child node is (2, 1)
Action: check_closed_list(2,1)
observation: False
child node is not visited till now
Action: calculate_h_value(2,1,(0, 1))
observation: h_new=2
g_new=11+1
f_new=12+2
pushing this node into heap
Action: push_heap(heap,(14,12,2,1))
observation: heap=[(14, 12, 1, 2), (16, 7, 5, 5), (16, 11, 4, 0), (16, 10, 5, 0)]
updating the cell details
Action: update_cell_details(2,1)
observation: done
child node is (2, 3)
Action: check_closed_list(2,3)
observation: False
child node is not visited till now
Action: calculate_h_value(2,3,(0, 1))
observation: h_new=4
g_new=11+1
f_new=12+4
pushing this node into heap
Action: push_heap(heap,(16,12,2,3))
observation: heap=[(14, 12, 1, 2), (14, 12, 2, 1), (16, 11, 4, 0), (16, 10, 5, 0), (16, 7, 5, 5)]
updating the cell details
Action: update_cell_details(2,3)
observation: done
selecting the node from the heap with lowest cost
f=14,g=12,node=(1,2)
Action: pop_heap(heap,(14,12,1,2))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (0, 2)
Action: check_closed_list(0,2)
observation: False
child node is not visited till now
Action: calculate_h_value(0,2,(0, 1))
observation: h_new=1
g_new=12+1
f_new=13+1
pushing this node into heap
Action: push_heap(heap,(14,13,0,2))
observation: heap=[(14, 12, 2, 1), (16, 7, 5, 5), (16, 11, 4, 0), (16, 10, 5, 0), (16, 12, 2, 3)]
updating the cell details
Action: update_cell_details(0,2)
observation: done
child node is (2, 2)
Action: check_closed_list(2,2)
observation: True
child node is already visited
continuing
child node is (1, 3)
Action: check_closed_list(1,3)
observation: False
child node is not visited till now
Action: calculate_h_value(1,3,(0, 1))
observation: h_new=3
g_new=12+1
f_new=13+3
pushing this node into heap
Action: push_heap(heap,(16,13,1,3))
observation: heap=[(14, 12, 2, 1), (16, 7, 5, 5), (14, 13, 0, 2), (16, 10, 5, 0), (16, 12, 2, 3), (16, 11, 4, 0)]
updating the cell details
Action: update_cell_details(1,3)
observation: done
selecting the node from the heap with lowest cost
f=14,g=12,node=(2,1)
Action: pop_heap(heap,(14,12,2,1))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (2, 2)
Action: check_closed_list(2,2)
observation: True
child node is already visited
continuing
selecting the node from the heap with lowest cost
f=14,g=13,node=(0,2)
Action: pop_heap(heap,(14,13,0,2))
observation: done
adding node to visited
Action: add_visited(node)
observation: done
exploring the child nodes
child node is (1, 2)
Action: check_closed_list(1,2)
observation: True
child node is already visited
continuing
child node is (0, 1)
Action: check_closed_list(0,1)
observation: False
The current node is the goal so we have achieved the target
The Path is 
-> (8, 1) -> (7, 1) -> (7, 2) -> (7, 3) -> (7, 4) -> (6, 4) -> (5, 4) -> (5, 3) -> (5, 2) -> (4, 2) -> (3, 2) -> (2, 2) -> (1, 2) -> (0, 2) -> (0, 1)